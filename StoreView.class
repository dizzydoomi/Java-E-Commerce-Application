import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

public class StoreView {
    private JFrame jFrame;
    private StoreManager storeManager;
    private int carts;
    private Color[] colors;

    public StoreView(StoreManager storeManager, int carts) {
        this.setFrame(storeManager, carts);
    }

    public void displayGUI() {
        JLabel welcomeLabel = new JLabel("Welcome to the Movie Store! (ID: " + this.carts + ")");
        welcomeLabel.setFont(new Font("Calibri", 1, 25));
        JPanel panelWelcomeLabel = new JPanel(new FlowLayout(1));
        panelWelcomeLabel.add(welcomeLabel);
        ArrayList<Product> inv = this.storeManager.getInventoryList();
        double columns = 3.0D;
        GridLayout gridLayout = new GridLayout((int)Math.ceil((double)inv.size() / columns), (int)columns, 5, 5);
        JPanel productsViewPanel = new JPanel(gridLayout);
        JScrollPane scrollPaneProducts = new JScrollPane(productsViewPanel);
        scrollPaneProducts.setHorizontalScrollBarPolicy(30);
        scrollPaneProducts.setVerticalScrollBarPolicy(22);

        for(int i = 0; i < this.storeManager.getInventoryList().size(); ++i) {
            Product prod = (Product)this.storeManager.getInventoryList().get(i);
            int stock = this.storeManager.getProductQuantity(prod);
            JPanel productPanel = new JPanel(new BorderLayout());
            productPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK), prod.getName() + " | " + prod.getProductId()));
            productPanel.setName(prod.getProductId() + "");
            Color color = this.colors[(int)(Math.random() * (double)this.colors.length)];
            productPanel.setBackground(color);
            JLabel lblPrice = new JLabel("($" + prod.getPrice() + ") - Stock: " + stock);
            lblPrice.setHorizontalAlignment(0);
            productPanel.add(lblPrice, "North");
            JLabel lblImage = new JLabel();
            lblImage.setIcon(new ImageIcon("movie-icon.jpg"));
            productPanel.add(lblImage, "Center");
            this.setAddRemovePanel(color, productPanel, lblPrice, stock, productsViewPanel);
            JPanel panelBottom = new JPanel();
            panelBottom.setLayout(new BoxLayout(panelBottom, 0));
            panelBottom.setPreferredSize(new Dimension(0, 135));
            JPanel panelButtons = new JPanel();
            panelButtons.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
            panelButtons.setLayout(new BoxLayout(panelButtons, 1));
            panelButtons.setPreferredSize(new Dimension(230, 110));
            panelButtons.setMaximumSize(new Dimension(230, 110));
            JButton viewCartButton = new JButton("View Cart", new ImageIcon("shopping-cart.png"));
            viewCartButton.setMaximumSize(new Dimension(130, 40));
            viewCartButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (StoreView.this.storeManager.getCartItems(StoreView.this.carts).size() > 0) {
                        String str = "";

                        Product prod;
                        for(Iterator var3 = StoreView.this.storeManager.getCartItems(StoreView.this.carts).iterator(); var3.hasNext(); str = str + StoreView.this.storeManager.getCartItemQuantity(StoreView.this.carts, prod) + "    |    " + prod.getName() + prod.getProductId() + "    |    $" + prod.getPrice() + "\n") {
                            prod = (Product)var3.next();
                        }

                        JOptionPane.showMessageDialog(StoreView.this.jFrame, str, "My Cart", 1);
                    } else {
                        JOptionPane.showMessageDialog(StoreView.this.jFrame, "Your cart is empty.", "My Cart", 1);
                    }

                }
            });
            viewCartButton.setAlignmentX(0.5F);
            JButton checkoutButton = new JButton("Checkout");
            checkoutButton.setMaximumSize(new Dimension(100, 35));
            checkoutButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (StoreView.this.storeManager.getCartItems(StoreView.this.carts).size() > 0) {
                        double totalPrice = StoreView.this.storeManager.processTransaction(StoreView.this.carts);
                        String str = "";

                        for(int i = 0; i < StoreView.this.storeManager.getCartItems(StoreView.this.carts).size(); ++i) {
                            Product prod = (Product)StoreView.this.storeManager.getCartItems(StoreView.this.carts).get(i);
                            str = str + StoreView.this.storeManager.getCartItemQuantity(StoreView.this.carts, prod) + "    |    " + prod.getName() + prod.getProductId() + "    |    $" + prod.getPrice() + "\n";
                        }

                        str = str + "Total: $" + totalPrice;
                        JOptionPane.showMessageDialog(StoreView.this.jFrame, str, "My Cart", 1);
                        System.exit(0);
                    } else {
                        JOptionPane.showMessageDialog(StoreView.this.jFrame, "Your cart is empty.", "Checkout", 1);
                    }

                }
            });
            checkoutButton.setAlignmentX(0.5F);
            JButton quitButton = new JButton("Quit");
            quitButton.setMaximumSize(new Dimension(80, 35));
            quitButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            });
            quitButton.setAlignmentX(0.5F);
            panelButtons.add(viewCartButton);
            panelButtons.add(checkoutButton);
            panelButtons.add(quitButton);
            panelButtons.revalidate();
            panelButtons.repaint();
            JPanel panelSale = new JPanel() {
                protected void paintComponent(Graphics g) {
                    g.drawImage((new ImageIcon("sale.png")).getImage(), 0, 0, (ImageObserver)null);
                }
            };
            panelSale.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
            panelSale.revalidate();
            panelSale.repaint();
            panelBottom.add(panelButtons);
            panelBottom.add(panelSale);
            this.jFrame.add(panelWelcomeLabel, "North");
            this.jFrame.add(scrollPaneProducts, "Center");
            this.jFrame.add(panelBottom, "South");
            this.jFrame.setVisible(true);
        }

    }

    public static void main(String[] args) {
        StoreManager storeManager = new StoreManager();
        StoreView sv = new StoreView(storeManager, storeManager.assignNewCartID());
        sv.displayGUI();
    }

    public void setFrame(StoreManager storeManager, int carts) {
        this.storeManager = storeManager;
        this.carts = carts;
        this.colors = new Color[]{Color.GRAY, Color.ORANGE, new Color(51, 153, 255), new Color(178, 102, 255), new Color(255, 201, 14), new Color(255, 55, 84), new Color(187, 95, 13), new Color(65, 216, 139)};
        this.jFrame = new JFrame("Client StoreView");
        this.jFrame.setBounds(350, 2, 800, 850);
        this.jFrame.setLayout(new BorderLayout(5, 5));
        this.jFrame.setResizable(false);
        this.jFrame.setDefaultCloseOperation(3);
    }

    private void setAddRemovePanel(Color color, final JPanel productPanel, final JLabel lblPrice, final int stock, JPanel productsViewPanel) {
        JPanel addRemovePanel = new JPanel(new FlowLayout(1, 5, 5));
        addRemovePanel.setBackground(color);
        final JButton btnRemove = new JButton("Remove");
        btnRemove.setFont(new Font("Arial", 1, 13));
        btnRemove.setEnabled(false);
        final JButton btnAdd = new JButton("Add", new ImageIcon("shopping-cart.png"));
        btnAdd.setFont(new Font("Arial", 1, 13));
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String quantityStr = JOptionPane.showInputDialog(StoreView.this.jFrame, "Quantity");
                if (quantityStr != null) {
                    int quantity = Integer.parseInt(quantityStr);
                    int productId = Integer.parseInt(productPanel.getName());
                    System.out.println("product id" + productId);
                    Product p = StoreView.this.storeManager.getInvProductInfo(productId);
                    if (StoreView.this.storeManager.getCartItemInfo(StoreView.this.carts, productId) != null) {
                        int option = JOptionPane.showConfirmDialog(StoreView.this.jFrame, "Movie is already added in the cart.\nDo you want to add it again?", "Confirm", 0);
                        if (option == 1) {
                            return;
                        }

                        quantity += StoreView.this.storeManager.getCartItemQuantity(StoreView.this.carts, p);
                        StoreView.this.storeManager.removeCartItem(StoreView.this.carts, p);
                    }

                    boolean check = StoreView.this.storeManager.addCartItem(StoreView.this.carts, p, quantity);
                    if (!check) {
                        JOptionPane.showMessageDialog(StoreView.this.jFrame, "Sorry, the stock is not available.");
                    } else {
                        lblPrice.setText("($" + p.getPrice() + ") - Stock: " + StoreView.this.storeManager.getProductQuantity(p));
                        btnRemove.setEnabled(true);
                        if (stock - quantity == 0) {
                            btnAdd.setEnabled(false);
                        }

                        productPanel.revalidate();
                        productPanel.repaint();
                    }

                }
            }
        });
        addRemovePanel.add(btnAdd);
        btnRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int option = JOptionPane.showConfirmDialog(StoreView.this.jFrame, "Do you want to remove the movie from cart?", "Confirm", 0);
                if (option != 1) {
                    int productId = Integer.parseInt(productPanel.getName());
                    Product p = StoreView.this.storeManager.getCartItemInfo(StoreView.this.carts, productId);
                    StoreView.this.storeManager.removeCartItem(StoreView.this.carts, p);
                    lblPrice.setText("($" + p.getPrice() + ") - Stock: " + StoreView.this.storeManager.getProductQuantity(p));
                    btnAdd.setEnabled(true);
                    btnRemove.setEnabled(false);
                    productPanel.revalidate();
                    productPanel.repaint();
                }
            }
        });
        addRemovePanel.add(btnRemove);
        productPanel.add(addRemovePanel, "South");
        productsViewPanel.add(productPanel);
    }
}
