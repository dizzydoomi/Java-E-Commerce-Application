import java.util.ArrayList;

public class StoreManager {
    private Inventory inventory = new Inventory();
    private ArrayList<ShoppingCart> cartItems = new ArrayList();
    private double totalPrice = 0.0D;

    public StoreManager() {
    }

    public int getProductQuantity(Product product) {
        return product != null ? this.inventory.getProductQuantity(product) : -1;
    }

    public double processTransaction(int cartId) {
        ShoppingCart cart = (ShoppingCart)this.cartItems.get(cartId);
        this.totalPrice = 0.0D;

        for(int i = 0; i < cart.getCartItems().size(); ++i) {
            Product p = (Product)cart.getCartItems().get(i);
            this.totalPrice += p.getPrice() * (double)cart.getProductQuantity(p);
        }

        return this.totalPrice;
    }

    public int assignNewCartID() {
        ShoppingCart cart = new ShoppingCart();
        this.cartItems.add(cart);
        return this.cartItems.indexOf(cart);
    }

    public ArrayList<Product> getCartItems(int cartId) {
        for(int i = 0; i < this.cartItems.size(); ++i) {
            if (i == cartId) {
                return ((ShoppingCart)this.cartItems.get(i)).getCartItems();
            }
        }

        return null;
    }

    public int getCartItemQuantity(int cartId, Product product) {
        ShoppingCart cartItem = (ShoppingCart)this.cartItems.get(cartId);
        return cartItem.getProductQuantity(product);
    }

    public ArrayList<Product> getInventoryList() {
        return this.inventory.getInventoryList();
    }

    public boolean addCartItem(int cartId, Product p, int quantity) {
        if (p != null && this.inventory.removeProductQuantity(p, quantity) == 1) {
            ShoppingCart cart = (ShoppingCart)this.cartItems.get(cartId);
            cart.addProductQuantity(p, quantity);
            this.cartItems.set(cartId, cart);
            return true;
        } else {
            return false;
        }
    }

    public boolean removeCartItem(int carts, Product prod) {
        if (prod != null) {
            int quantity = ((ShoppingCart)this.cartItems.get(carts)).getProductQuantity(prod);
            ShoppingCart shopCart = (ShoppingCart)this.cartItems.get(carts);
            if (shopCart.removeProductQuantity(prod, quantity) == 1) {
                this.cartItems.set(carts, shopCart);
                this.inventory.addProductQuantity(prod, quantity);
                return true;
            }
        }

        return false;
    }

    public Product getInvProductInfo(int product_id) {
        if (product_id > 0) {
            Product product = this.inventory.getProductById(product_id);
            return this.inventory.getProductInfo(product);
        } else {
            return null;
        }
    }

    public Product getCartItemInfo(int cartId, int product_id) {
        if (product_id > 0) {
            Product product = this.inventory.getProductById(product_id);
            ShoppingCart cart = (ShoppingCart)this.cartItems.get(cartId);
            return cart.getProductInfo(product);
        } else {
            return null;
        }
    }
}
